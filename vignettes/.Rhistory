getwd()
PRESET_OUTDIR_SEQMETA<-"test"
outDir=PRESET_OUTDIR_SEQMETA
outDir==PRESET_OUTDIR_SEQMETA
!dir.exists(outDir)
paste0(PRESET_OUTDIR, PRESET_OUTDIR_SEQMETA)
# Output directory for the pipeline. Absolute path.
# Output directory for the pipeline. Creates a "NEON" directory within current working directory.
PRESET_OUTDIR = file.path(getwd(), "NEON")
PRESET_OUTDIR_SEQMETA = "sequence_metadata" # for sequence metadata
outDir=PRESET_OUTDIR_SEQMETA
outDir==PRESET_OUTDIR_SEQMETA
outDir <- paste0(PRESET_OUTDIR, PRESET_OUTDIR_SEQMETA)
outDir
outDir <- paste(PRESET_OUTDIR, "/", PRESET_OUTDIR_SEQMETA)
outDir
outDir <- paste(PRESET_OUTDIR, PRESET_OUTDIR_SEQMETA, sep="/")
outDir
stringsAsFactors = FALSE)
infile <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mmg_markerGeneSequencing_ITS_in.txt',
stringsAsFactors = FALSE)
wrongTargetGene <- infile[which(infile$targetGene=="ITS1-2"), ]
unique(infile$targetGene)
infile <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mmg_pcrAmplification_ITS_in.txt',
infile <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mmg_pcrAmplification_ITS_in.txt',
stringsAsFactors = FALSE)
View(infile)
View(infile)
library(restR)
options(stringsAsFactors = FALSE)
rootSamples <- "JERC_047-M-4-12-20160727-GEN-DNA1"
root_sampleid <- rootSamples
child_IDs <- vector()
child_classes <- vector()
my_hier <- restR::get.sample.hierarchy(tag = root_sampleid, stack = 'cert')
# Create and fill vectors
for (n in names(my_hier)[grepl('child',names(my_hier))]){
child_IDs <- c(child_IDs,eval(parse(text=paste0('my_hier$',n,'$tag'))))
child_classes <- c(child_classes,eval(parse(text=paste0('my_hier$',n,'$sampleClassCode'))))
}
outIDs <- c(outIDs, child_IDs[which(child_classes == 'mcc_taxonTableMetadata_16S_in.communitySubsampleID')] )
outIDs <- vector()
outIDs <- c(outIDs, child_IDs[which(child_classes == 'mcc_taxonTableMetadata_16S_in.communitySubsampleID')] )
child_classes
rootSamples <- "BLAN_031-M-23-7.5-20151110-GEN-DNA2"
root_sampleid <- rootSamples
outIDs <- vector()
child_IDs <- vector()
child_classes <- vector()
my_hier <- restR::get.sample.hierarchy(tag = root_sampleid, stack = 'cert')
# Create and fill vectors
for (n in names(my_hier)[grepl('child',names(my_hier))]){
child_IDs <- c(child_IDs,eval(parse(text=paste0('my_hier$',n,'$tag'))))
child_classes <- c(child_classes,eval(parse(text=paste0('my_hier$',n,'$sampleClassCode'))))
}
child_classes
outIDs <- vector()
child_IDs <- vector()
child_classes <- vector()
my_hier <- restR::get.sample.hierarchy(tag = root_sampleid, stack = 'prod')
# Create and fill vectors
for (n in names(my_hier)[grepl('child',names(my_hier))]){
child_IDs <- c(child_IDs,eval(parse(text=paste0('my_hier$',n,'$tag'))))
child_classes <- c(child_classes,eval(parse(text=paste0('my_hier$',n,'$sampleClassCode'))))
}
child_classes
outIDs <- c(outIDs, child_IDs[which(child_classes == 'mcc_taxonTableMetadata_16S_in.communitySubsampleID')] )
rootSamples <- "JERC_003-M-19-6.5-20160726-GEN-DNA1"
root_sampleid <- rootSamples
outIDs <- vector()
child_IDs <- vector()
child_classes <- vector()
my_hier <- restR::get.sample.hierarchy(tag = root_sampleid, stack = 'prod')
# Create and fill vectors
for (n in names(my_hier)[grepl('child',names(my_hier))]){
child_IDs <- c(child_IDs,eval(parse(text=paste0('my_hier$',n,'$tag'))))
child_classes <- c(child_classes,eval(parse(text=paste0('my_hier$',n,'$sampleClassCode'))))
}
outIDs <- c(outIDs, child_IDs[which(child_classes == 'mcc_taxonTableMetadata_16S_in.communitySubsampleID')] )
child_classes
infile <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mmg_markerGeneSequencing_ITS_in.txt',
names(infile)
infile <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mmg_markerGeneSequencing_ITS_in.txt', stringsAsFactors = FALSE)
names(infile)
infile <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mmg_pcrAmplification_ITS_in.txt', stringsAsFactors = FALSE)
wrongTargetGene <- infile[which(infile$targetSubfragment=="ITS1-2"), ]
View(wrongTargetGene)
# how many in initial data release?
wrongV1 <- wrongTargetGene[grep("2015|2016|2017|2018", wrongTargetGene$targetSubfragment), ]
# how many in initial data release?
wrongV1 <- wrongTargetGene[grep("2015|2016|2017|2018", wrongTargetGene$dnaSampleID), ]
wrongTargetSub <- infile[which(infile$targetSubfragment=="ITS1-2"), ]
# how many in initial data release?
wrongV1 <- wrongTargetSub[grep("2015|2016|2017|2018", wrongTargetSub$dnaSampleID), ]
# get through as many as possible, I guess!
fixed <- wrongTargetSub
fixed$targetSubfragment <- gsub("ITS1-2", "ITS1", wrongTargetSub$targetSubfragment)
View(fixed)
# export for L0 editing
dir.create('/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/')
write.csv('/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/orig_L0_mmgPcrAmp_ITS.csv',
row.names=FALSE)
write.csv(wrongTargetSub, '/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/orig_L0_mmgPcrAmp_ITS.csv',
row.names=FALSE)
write.csv(fixed, '/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/L0edits_mmgPcrAmp_ITS.csv',
row.names=FALSE)
# subset and export
source('/Users/lstanish/Github/devTOS/sharedUsefulFunctions/subsetFile.R')
subsetFile(fixed, 250, '/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203')
subsetFile(fixed, 250, '/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/')
subsetFile(fixed, 250, '/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/mmg_pcrITS')
names(infile) <- gsub("\\.", " ", names(infile))
wrongTargetSub <- infile[which(infile$targetSubfragment=="ITS1-2"), ]
# how many in initial data release?
wrongV1 <- wrongTargetSub[grep("2015|2016|2017|2018", wrongTargetSub$dnaSampleID), ]
# get through as many as possible, I guess!
fixed <- wrongTargetSub
fixed$targetSubfragment <- gsub("ITS1-2", "ITS1", wrongTargetSub$targetSubfragment)
# export for L0 editing
dir.create('/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/')
write.csv(wrongTargetSub, '/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/orig_L0_mmgPcrAmp_ITS.csv',
row.names=FALSE)
write.csv(fixed, '/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/L0edits_mmgPcrAmp_ITS.csv',
row.names=FALSE)
subsetFile(fixed, 250, '/Users/lstanish/Box/L0dataEditing/mmg_pcrITS_fixTargetSubfragment-210201203/mmg_pcrITS')
infile <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mic_dnaExtraction_in.txt', sstringsAsFactors = FALSE)
infile <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mic_dnaExtraction_in.txt', stringsAsFactors = FALSE)
View(infile)
raw <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mmg_rawDataFiles_in.txt', stringsAsFactors = FALSE)
View(raw)
dna <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mic_dnaExtraction_in.txt', stringsAsFactors = FALSE)
target <- "NIWO-004-O-30.5-19.5-20160627-GEN"
dnaTarget <- dna[grep(target, dna$dnaSampleID), ]
View(dna)
target <- "NIWO_004-O-30.5-19.5-20160627-GEN"
dnaTarget <- dna[grep(target, dna$dnaSampleID), ]
rawTarget <- raw[grep(target, raw$dnaSampleID), ]
dnaTarget <- dna[grep(target, paste(dna$dnaSampleID, dna$internalLabID, sep="-"), ]
dnaTarget <- dna[grep(target, paste(dna$dnaSampleID, dna$internalLabID, sep="-")), ]
# 2 records
rawTarget <- raw[grep(target, paste(raw$dnaSampleID, raw$internalLabID, sep="-")), ]
target <- "NIWO_004-O-30.5-19.5-20160627-GEN-BMI_PLATE17WELLA3"
dnaTarget <- dna[grep(target, paste(dna$dnaSampleID, dna$internalLabID, sep="-")), ]
# 2 records
rawTarget <- raw[grep(target, paste(raw$dnaSampleID, raw$internalLabID, sep="-")), ]
paste(dna$dnaSampleID, dna$internalLabID, sep="-")
dnaTarget <- dna[grep(target, paste(dna$geneticSampleID, dna$internalLabID, sep="-")), ]
paste(dna$geneticSampleID, dna$internalLabID, sep="-")
dnaTarget <- dna[grep(target, paste(dna$geneticSampleID, toupper(dna$internalLabID), sep="-")), ]
# 1 record
rawTarget <- raw[grep(target, paste(gsub("DNA1|DNA2|DNA3", "", raw$dnaSampleID), toupper(raw$internalLabID), sep="-")), ]
paste(gsub("DNA1|DNA2|DNA3", "", raw$dnaSampleID), toupper(raw$internalLabID), sep="-")
# 1 record
rawTarget <- raw[grep(target, paste(gsub("-DNA1|-DNA2|-DNA3", "", raw$dnaSampleID), toupper(raw$internalLabID), sep="-")), ]
View(rawTarget)
rawTarget$dnaSampleID <- gsub("DNA1", "DNA2", rawTarget$dnaSampleID)
View(rawTarget)
# 1 record
rawTarget <- raw[grep(target, paste(gsub("-DNA1|-DNA2|-DNA3", "", raw$dnaSampleID), toupper(raw$internalLabID), sep="-")), ]
rawFixed <- rawTarget
rawFixed$dnaSampleID <- gsub("DNA1", "DNA2", rawTarget$dnaSampleID)
rawFixed <- rawTarget
rawFixed$dnaSampleID <- gsub("DNA1", "DNA2", rawFixed$dnaSampleID)
View(rawFixed)
dir.create('/Users/lstanish/Box/L0dataEditing/mmg_rawDataFiles_fixDnaSampleID-20201203/')
raw <- read.delim('/Users/lstanish/Documents/sls_FieldData/ProdL0data/L0_mmg_rawDataFiles_in.txt', stringsAsFactors = FALSE)
names(raw) <- gsub("\\.", " ", names(raw))
target <- "NIWO_004-O-30.5-19.5-20160627-GEN-BMI_PLATE17WELLA3"
dnaTarget <- dna[grep(target, paste(dna$geneticSampleID, toupper(dna$internalLabID), sep="-")), ]
# 1 record
rawTarget <- raw[grep(target, paste(gsub("-DNA1|-DNA2|-DNA3", "", raw$dnaSampleID), toupper(raw$internalLabID), sep="-")), ]
rawFixed <- rawTarget
rawFixed$dnaSampleID <- gsub("DNA1", "DNA2", rawFixed$dnaSampleID)
View(rawTarget)
View(rawFixed)
# export for L0 editing
dir.create('/Users/lstanish/Box/L0dataEditing/mmg_rawDataFiles_fixDnaSampleID-20201203/')
write.csv(rawTarget, '/Users/lstanish/Box/L0dataEditing/mmg_rawDataFiles_fixDnaSampleID-20201203/orig_L0_mmg_rawDataFiles.csv',
row.names = FALSE)
write.csv(rawFixed, '/Users/lstanish/Box/L0dataEditing/mmg_rawDataFiles_fixDnaSampleID-20201203/L0edits_mmg_rawDataFiles.csv',
row.names = FALSE)
Sys.time()
#' @param sequencingRuns Either the string 'all', meaning all available sequencing runs, or a character vector of NEON sequencing run IDs, e.g. c('C25G9', 'B69PP').
#' @param dpID NEON data product of interest. Default is soil marker gene sequences, and currently code only works for marker genes data products.
#' @param outDir (Optional) If a local copy of the filtered metadata is desired, provide path to output directory.
#'
#' @return Data frame containing joined records from across the NEON soil marker gene sequence metadata, subsetted according to function arguments.
#' @examples
#' \dontrun{
#' meta <- downloadSequenceMetadataRev('all', '2015-01', '2016-01', '16S') # metadata is not saved to local directory
#' meta <- downloadSequenceMetadataRev('all', '2015-01', '2016-01', '16S', dir='./data/') # metadata is saved to local directory
#' }
downloadSequenceMetadata <- function(sites='all', startYrMo=NA, endYrMo=NA, targetGene= "all",
sequencingRuns = "", dpID = "DP1.10108.001", outDir=PRESET_OUTDIR_SEQMETA) {
# author: Lee Stanish
# date: 2020-08-13
# function loads soil marker gene sequencing metadata for target gene, site(s) and date(s)
# option to download output by providing a valid output directory
# sites: character vector of valid site ID's, or 'all' for all sites
# targetGene: '16S',  'ITS', 'all'
# startYrMo: start date, format YYYY-MM
# endYrMo: end date, format YYYY-MM
# dpID: NEON data product of interest. Default is soil marker gene sequences, and currently code only works for this dpID
# outDir: directory for outputs. Defaults to output directory in parameters file
library(neonUtilities)
library(plyr)
library(dplyr)
# check valid data values entered
## validate dpID ##
if(!grepl("DP1", dpID) | !grepl('\\.001', dpID) | !grepl('10108|20280|20282', dpID)) {
message("Invalid Data Product ID: must follow convention 'DP1.[5-digit value].001' and must be a marker genes data product ID")
return(NULL)
} else {
dpID <- dpID
}
# validate target gene
if(!grepl("16S|ITS|all", targetGene)) {
message("Invalid targetGene: must be either '16S', 'ITS', 'all' ")
return(NULL)
} else {
targetGene <- targetGene
}
# validate site(s)
terrSiteList <- c("all","HARV","SCBI","OSBS","GUAN","UNDE","KONZ","ORNL","TALL","WOOD","CPER","CLBJ","YELL","NIWO",
"SRER","ONAQ","WREF","SJER","TOOL","BONA","PUUM","BART","BLAN","SERC","SCBI","DSNY","JERC","LAJA",
"TREE","STEI","KONA","UKFS","MLBS","GRSM","LENO","DELA","NOGP","DCFS","STER","RMNP","OAES","MOAB",
"JORN","ABBY","TEAK","SOAP","BARR","DEJU","HEAL")
if(!any(sites %in% terrSiteList)){
message("Invalid site(s): must be a valid NEON site or 'all'")
return(NULL)
} else {
sites <- sites
}
# validate output directory
if(outDir==PRESET_OUTDIR_SEQMETA) {
outDir <- paste(PRESET_OUTDIR, PRESET_OUTDIR_SEQMETA, sep="/")
}
if(!dir.exists(outDir) ) {
message("Output directory does not exist")
return(NULL)
}
message("loading metadata...")
mmgL1 <- loadByProduct(dpID, sites, package = 'expanded', check.size = F, startdate = startYrMo, enddate = endYrMo) # output is a list of each metadata file
# for target data product and targetGene: extract lists into data.frames
if(grepl("10108", dpID)) {
seq16S <- mmgL1$mmg_soilMarkerGeneSequencing_16S
seqITS <- mmgL1$mmg_soilMarkerGeneSequencing_ITS
pcr16S <- mmgL1$mmg_soilPcrAmplification_16S
pcrITS <- mmgL1$mmg_soilPcrAmplification_ITS
raw <- mmgL1$mmg_soilRawDataFiles
dna <- mmgL1$mmg_soilDnaExtraction
seq <- rbind(seq16S, seqITS)
pcr <- rbind(pcr16S, pcrITS)
if(targetGene=="16S") {
message("filtering to 16S data")
seq <- seq16S
pcr <- pcr16S
}
if(targetGene=="ITS") {
message("filtering to ITS data")
seq <- seqITS
pcr <- pcrITS
}
}
if(grepl("20280", dpID)) {
seq16S <- mmgL1$mmg_benthicMarkerGeneSequencing_16S
seqITS <- mmgL1$mmg_benthicMarkerGeneSequencing_ITS
pcr16S <- mmgL1$mmg_benthicPcrAmplification_16S
pcrITS <- mmgL1$mmg_benthicPcrAmplification_ITS
raw <- mmgL1$mmg_benthicRawDataFiles
dna <- mmgL1$mmg_benthicDnaExtraction
seq <- rbind(seq16S, seqITS)
pcr <- rbind(pcr16S, pcrITS)
if(targetGene=="16S") {
message("filtering to 16S data")
seq <- seq16S
pcr <- pcr16S
}
if(targetGene=="ITS") {
message("filtering to ITS data")
seq <- seqITS
pcr <- pcrITS
}
}
if(grepl("20282", dpID)) {
seq16S <- mmgL1$mmg_swMarkerGeneSequencing_16S
seqITS <- mmgL1$mmg_swMarkerGeneSequencing_ITS
pcr16S <- mmgL1$mmg_swPcrAmplification_16S
pcrITS <- mmgL1$mmg_swPcrAmplification_ITS
raw <- mmgL1$mmg_swRawDataFiles
dna <- mmgL1$mmg_swDnaExtraction
seq <- rbind(seq16S, seqITS)
pcr <- rbind(pcr16S, pcrITS)
if(targetGene=="16S") {
message("filtering to 16S data")
seq <- seq16S
pcr <- pcr16S
}
if(targetGene=="ITS") {
message("filtering to ITS data")
seq <- seqITS
pcr <- pcrITS
}
}
# remove unnecessary/redundant columns from tables
raw <- dplyr::select(raw, -domainID, -siteID, -namedLocation, -laboratoryName, -sequencingFacilityID, -collectDate, -dnaSampleCode)
dna <- dplyr::select(dna, -domainID, -siteID, -namedLocation, -laboratoryName, -collectDate)
pcr <- dplyr::select(pcr, -domainID, -siteID, -namedLocation, -laboratoryName, -collectDate)
# convert factors to characters (bug in output of loadByProduct)
i <- sapply(seq, is.factor)
seq[i] <- lapply(seq[i], as.character)
j <- sapply(raw, is.factor)
raw[j] <- lapply(raw[j], as.character)
j <- sapply(dna, is.factor)
raw[j] <- lapply(dna[j], as.character)
# If specified, filter by sequencing run ID
if(sequencingRuns[1] != "") {
raw <- raw[which(raw$sequencerRunID %in% sequencingRuns), ]
# Validate sequencing run ID argument
if(nrow(raw) == 0) {
warning("After filtering by specified sequencing run ID(s), no records remain. Double-check your sequencing run  ID(s).")
return(NULL)
}
}
# Join sequencing metadata with raw data files metadata
if(targetGene=="16S") {
if(any(grepl("ITS", raw$rawDataFileName))) {
rawCleaned <- raw[-grep("ITS", raw$rawDataFileName), ]
} else {
rawCleaned <- raw
}
joinedTarget <- left_join(rawCleaned, seq, by=c('dnaSampleID', 'sequencerRunID', 'internalLabID'))
out <- joinedTarget[!is.na(joinedTarget$uid.y), ]
}
if(targetGene=="ITS") {
if(any(grepl("16S", raw$rawDataFileName))) {
rawCleaned <- raw[-grep("16S", raw$rawDataFileName), ]
} else {
rawCleaned <- raw
}
joinedTarget <- left_join(rawCleaned, seq, by=c('dnaSampleID', 'sequencerRunID', 'internalLabID'))
out <- joinedTarget[!is.na(joinedTarget$uid.y), ]
}
if(targetGene=="all") {
joinedTarget <- left_join(raw, seq, by=c('dnaSampleID', 'sequencerRunID', 'internalLabID'))
out <- joinedTarget[!is.na(joinedTarget$uid.y), ]
message(paste0(length(grep("16S", joinedTarget$rawDataFileName)), " 16S records and ", length(grep("ITS", joinedTarget$rawDataFileName)), " ITS records found."))
}
# clean up redundant column names
names(out) <- gsub("\\.x", ".rawFiles", names(out))
names(out) <- gsub("\\.y", ".seq", names(out))
# join with DNA extraction metadata
outDNA <- left_join(out, dna, by=c('plotID', 'dnaSampleID', 'internalLabID'))
# clean up redundant column names
names(outDNA) <- gsub("\\.x", ".seq", names(outDNA))
names(outDNA) <- gsub("\\.y", ".dna", names(outDNA))
names(outDNA)[names(outDNA)=="uid"] <- 'uid.dna'
names(outDNA)[names(outDNA)=="remarks"] <- 'remarks.dna'
names(outDNA)[names(outDNA)=="dataQF"] <- 'dataQF.dna'
names(outDNA)[names(outDNA)=="processedBy"] <- 'processedBy.seq'
names(outDNA)[names(outDNA)=="processedDate"] <- 'processedDate.dna'
names(outDNA)[names(outDNA)=="publicationDate"] <- 'publicationDate.dna'
names(outDNA)[names(outDNA)=="dnaProcessedBy"] <- 'processedBy.dna'
# join with PCR amplification metadata
outPCR <- left_join(outDNA, pcr, by=c('plotID', 'dnaSampleID', 'internalLabID'))
names(outPCR)[names(outPCR)=="uid"] <- "uid.pcr"
names(outPCR)[names(outPCR)=="processedDate"] <- "processedDate.pcr"
names(outPCR)[names(outPCR)=="testProtocolVersion"] <- "testProtocolVersion.pcr"
names(outPCR)[names(outPCR)=="qaqcStatus"] <- "qaqcStatus.pcr"
names(outPCR)[names(outPCR)=="processedBy"] <- "processedBy.pcr"
names(outPCR)[names(outPCR)=="remarks"] <- "remarks.pcr"
names(outPCR)[names(outPCR)=="dataQF"] <- "dataQF.pcr"
names(outPCR)[names(outPCR)=="publicationDate"] <- "publicationDate.pcr"
# download local copy to output dir path
write.csv(outPCR, file.path(outDir, paste0("mmg_soilMetadata_", targetGene, "_", Sys.Date(), ".csv")),
row.names=FALSE)
message(paste0("metadata downloaded to: ", outDir, "/mmg_soilMetadata_", targetGene, "_", Sys.time(), ".csv") )
return(outPCR)
}
meta <- downloadSequenceMetadata(startYrMo = "2018-02", endYrMo = "2018-03",
sites = c("CLBJ"),
targetGene = "ITS")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
if(dir.exists("~/zhulab/")) {
knitr::opts_knit$set(
root.dir = "~/zhulab/neonSoilMicrobeProcessing/" # Update as necessary. Should refer to the absolute filepath of the project root directory (e.g. .../neonSoilMicrobeProcessing)
)
}
if(dir.exists("/Users/lstanish/Github/")) {
knitr::opts_knit$set(
root.dir = "/Users/lstanish/Github/NEON_soil_microbe_processing/") # LFS directory file path.
}
install.packages("dplyr")
install.packages("neonUtilities")
install.packages("R.utils")
