% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch_management.R
\name{checkArgsAgainstBatchParams}
\alias{checkArgsAgainstBatchParams}
\title{Check Function Arguments against Batch-Specific Parameters}
\usage{
checkArgsAgainstBatchParams(
  priority = c("batch", "arguments"),
  ...,
  verbose = TRUE,
  warn_no_batch = FALSE
)
}
\arguments{
\item{priority}{Must be "batch" or "arguments". Whether to defer to batch-specific processing parameters or function arguments when they conflict.}

\item{...}{Format \link{function argument (string or name)} = \link{batch parameter (string)}. Arguments with a corresponding batch parameter, set to whatever the name of that batch parameter is, e.g. \verb{maxEE = "MAX_EE_FWD}. The arguments will be checked against the batch parameters.}

\item{verbose}{Default TRUE. Whether to print a warning if the function argument and batch parameter do not match.}

\item{warn_no_batch}{Default FALSE. Whether to print a warning if there is no current processing batch.}
}
\value{
No value is returned
}
\description{
If a processing batch is currently set, inserting this function into another function from
neonMicrobe will check the parent function's arguments against the parameters associated
with the current processing batch. If priority = "batch", the current batch's parameters would
take precedence.
}
\details{
If priority = "batch", then rather than using quality filtering parameters
defined on-the-fly as function arguments, the parent function would instead
use the quality filtering parameters associated with the current batch.
If priority = "batch", then rather than using the default output directory,
the parent function would instead use the batch-specific outputs.
}
